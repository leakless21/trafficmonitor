frame_grabber:
  video_source: "data/videos/input/platetest.mp4"
  resolution: [1280, 720] # Different from original video resolution
  fps_limit: 15
  jpeg_quality: 80

vehicle_detector:
  model_path: "data/models/yolo11n.pt"
  conf_threshold: 0.6
  class_mapping:
    0: "person"
    1: "bicycle"
    2: "car"
    3: "motorcycle"
    5: "bus"
    7: "truck"

vehicle_tracker:
  tracker_type: "bytetrack"
  half: false
  device: "cpu"
  reid_model_path: None
  evolve_param_dict: None
  per_class: None

loguru:
  level: "DEBUG"
  format: "<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{process.name: <15}</cyan> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>"
  file_path: "logs/traffic_monitor.log"
  file_rotation: "10 MB"
  file_retention: "7 days"
  file_compression: "zip"
  terminal_output_enabled: true
  log_file_overwrite: true

lp_detector:
  model_path: "data/models/plate_v8n.pt"
  conf_threshold: 0.5

ocr_reader:
  hub_model_name: "global-plates-mobile-vit-v2-model"
  device: "auto"
  conf_threshold: 0.5

vehicle_counter:
  # VehicleCounter defines its own counting lines - no duplication needed!
  counting_lines:
    - # Primary counting line (defined in original video coordinates)
      - [0, 750] # Left point at y=750 (≈70% of original 1080p video)
      - [1920, 750] # Right point at y=750
  # Display properties for visualization
  display_color: [0, 0, 255] # BGR color (red)
  line_thickness: 2
  enabled: true

visualizer:
  font: "FONT_HERSHEY_SIMPLEX"
  font_scale: 0.6
  font_thickness: 2
  ocr_duration: 3.0
  # Counting line coordinates and display properties are received from VehicleCounter
  # No counting line configuration needed here!

  # Modern, visually distinct color palette (BGR format for OpenCV)
  class_colors:
    car: [0, 119, 187] # Blue
    truck: [14, 127, 255] # Orange
    bus: [44, 160, 44] # Green
    motorcycle: [40, 39, 214] # Red
    bicycle: [189, 103, 148] # Purple
    person: [75, 86, 140] # Brown
    van: [194, 119, 227] # Pink
    trailer: [127, 127, 127] # Gray
    scooter: [34, 189, 188] # Olive
    boat: [207, 190, 23] # Cyan

  # Default color for unknown classes
  default_color: [255, 255, 255] # White

# ✅ Correct Architecture:
#
# 1. VehicleCounter reads its own 'counting_lines' configuration
# 2. VehicleCounter normalizes coordinates and handles resolution scaling
# 3. VehicleCounter sends counting line info to Visualizer via VehicleCountMessage
# 4. Visualizer displays exactly what VehicleCounter is using for counting
#
# Benefits:
# - No configuration duplication
# - VehicleCounter is the single source of truth for counting logic
# - Guaranteed consistency between counting and visualization
# - Clean separation of concerns

# Resolution Scaling:
# The counting lines above are defined in original video coordinates (1920x1080)
# The system automatically scales them to display resolution (1280x720)
# Example: y=750 (70% of 1080) becomes y=500 (70% of 720)
